import { firestore, getFirestoreService } from '../firebase';
import { AuthService } from './AuthService';
import { withFirestoreRetry } from '../utils/firestoreRetry';

export const EventService = {
  // Create test events (temporary function for development)  createTestEvents: async () => {
    try {
      console.log('Creating test events...');
      const events = [];

      // Current date is June 2, 2025
      const baseDate = new Date(2025, 5, 2); // June 2, 2025
      
      const testEvents = [
        {
          title: 'Campus Tech Meetup',
          description: 'Join us for an exciting tech meetup where students can share their projects and network with peers',
          location: 'Engineering Building Room 101',
          startTime: new Date(baseDate.getTime() + 3 * 24 * 60 * 60 * 1000), // June 5
          endTime: new Date(baseDate.getTime() + 3 * 24 * 60 * 60 * 1000 + 2 * 60 * 60 * 1000),
          tags: ['Tech', 'Networking'],
          isPublic: true,
          maxParticipants: 50
        },
        {
          title: 'Career Development Workshop',
          description: 'Learn essential skills for your career journey including resume writing and interview preparation',
          location: 'Business School Auditorium',
          startTime: new Date(baseDate.getTime() + 7 * 24 * 60 * 60 * 1000), // June 9
          endTime: new Date(baseDate.getTime() + 7 * 24 * 60 * 60 * 1000 + 3 * 60 * 60 * 1000),
          tags: ['Career', 'Workshop'],
          isPublic: true,
          maxParticipants: 100
        },
        {
          title: 'AI Research Symposium',
          description: 'Research presentations and discussions on the latest developments in Artificial Intelligence',
          location: 'Virtual Event',
          startTime: new Date(baseDate.getTime() + 10 * 24 * 60 * 60 * 1000), // June 12
          endTime: new Date(baseDate.getTime() + 10 * 24 * 60 * 60 * 1000 + 4 * 60 * 60 * 1000),
          tags: ['AI', 'Research', 'Academic'],
          isPublic: true,
          maxParticipants: 200
        },
        {
          title: 'Sports Tournament',
          description: 'Inter-department sports tournament featuring basketball, volleyball, and badminton',
          location: 'University Sports Complex',
          startTime: new Date(baseDate.getTime() + 14 * 24 * 60 * 60 * 1000), // June 16
          endTime: new Date(baseDate.getTime() + 14 * 24 * 60 * 60 * 1000 + 8 * 60 * 60 * 1000),
          tags: ['Sports', 'Competition'],
          isPublic: true,
          maxParticipants: 150
        },
        {
          title: 'Cultural Night 2025',
          description: 'Annual cultural celebration featuring performances, food, and cultural exhibitions',
          location: 'Main Campus Amphitheater',
          startTime: new Date(baseDate.getTime() + 21 * 24 * 60 * 60 * 1000), // June 23
          endTime: new Date(baseDate.getTime() + 21 * 24 * 60 * 60 * 1000 + 5 * 60 * 60 * 1000),
          tags: ['Cultural', 'Entertainment'],
          isPublic: true,
          maxParticipants: 500
        }
      ];

      // Create all events
      for (const eventData of testEvents) {
        const result = await EventService.createEvent(eventData);
        events.push(result);
        console.log('Created event:', result);
      }

      return events;
    } catch (error) {
      console.error('Error creating test events:', error);
      throw error;
    }
  },

  // Function to clean up test events
  deleteTestEvents: async () => {
    try {
      console.log('Deleting test events...');
      const testEventTitles = [
        'Campus Tech Meetup',
        'Career Development Workshop',
        'AI Research Symposium',
        'Sports Tournament',
        'Cultural Night 2025'
      ];

      const firestoreService = await getFirestoreService();
      const eventsRef = firestoreService.collection('events');
      
      // Get all events
      const snapshot = await eventsRef
        .where('title', 'in', testEventTitles)
        .get();

      // Delete each event
      const batch = firestoreService.batch();
      snapshot.docs.forEach(doc => {
        batch.delete(doc.ref);
      });

      await batch.commit();
      console.log(`Deleted ${snapshot.docs.length} test events`);
      
      return { deletedCount: snapshot.docs.length };
    } catch (error) {
      console.error('Error deleting test events:', error);
      throw error;
    }
  },

  // Get mock events for testing/development
  getMockEvents: () => {
    console.log('Adding mock events for testing');
    const tomorrow = new Date(Date.now() + 86400000); // Tomorrow
    const nextWeek = new Date(Date.now() + 7 * 86400000); // Next week
    
    const mockEvents = [
      {
        id: 'mock-event1',
        title: 'Welcome to Campus Connect',
        description: 'Introduction event for new students',
        location: 'Main Auditorium',
        startTime: tomorrow,
        endTime: new Date(tomorrow.getTime() + 7200000), // +2 hours
        createdAt: new Date(),
        organizer: 'system',
        attendees: [],
        tags: ['Welcome', 'General'],
        isPublic: true
      },
      {
        id: 'mock-event2',
        title: 'Study Group - Programming Fundamentals',
        description: 'Weekly study session for CS101',
        location: 'Library Room 204',
        startTime: nextWeek,
        endTime: new Date(nextWeek.getTime() + 5400000), // +1.5 hours
        createdAt: new Date(),
        organizer: 'system',
        attendees: [],
        tags: ['Study', 'Programming'],
        isPublic: true
      }
    ];
    
    console.log('Added mock events:', mockEvents.length);
    return mockEvents;
  },

  // Get all events with optional filters
  getEvents: async (filters = {}) => {
    return withFirestoreRetry(async (forceServerRefresh = false) => {
      console.log('Getting events with filters:', filters, forceServerRefresh ? '(forcing server refresh)' : '');
      const firestoreService = await getFirestoreService();
      
      try {
        // Start the query
        let query = firestoreService.collection('events');
        
        // First check if the collection exists and has any documents
        const checkSnapshot = await query.limit(1).get({ source: 'server' });
        
        // If no events exist, return mock events for testing/development
        if (checkSnapshot.empty) {
          console.log('No events found in Firestore, using mock events');
          return EventService.getMockEvents();
        }

        // Apply filters
        if (filters.tags && filters.tags.length > 0) {
          console.log('Adding tag filter:', filters.tags);
          query = query.where('tags', 'array-contains-any', filters.tags);
        }
        
        // Filter by date range
        const now = new Date();
        console.log('Current date for filtering:', now);
        
        // Ensure we're using the server's timestamp for consistent filtering
        const serverNow = firestore.Timestamp.now();
        
        if (filters.timeframe === 'upcoming') {
          console.log('Adding upcoming filter (startTime >= now)');
          query = query.where('startTime', '>=', serverNow);
          query = query.orderBy('startTime', 'asc');
        } else if (filters.timeframe === 'past') {
          console.log('Adding past filter (startTime < now)');
          query = query.where('startTime', '<', serverNow);
          query = query.orderBy('startTime', 'desc');
        } else {
          // Default ordering
          query = query.orderBy('startTime', 'asc');
        }
        
        // Limit to a reasonable number
        query = query.limit(50);
        
        // Get options for the query
        let getOptions = {};
        if (filters.timestamp || forceServerRefresh) {
          getOptions = { source: 'server' };
          console.log('Forcing server refresh of results');
        }
        
        // Get events
        console.log('Executing query to get events');
        const eventsSnapshot = await query.get(getOptions);
        
        if (eventsSnapshot.empty) {
          console.log('No events found with current filters, using mock events');
          return EventService.getMockEvents();
        }
        
        console.log(`Query returned ${eventsSnapshot.docs.length} events`);
        
        const events = eventsSnapshot.docs.map(doc => {
          const data = doc.data();
          
          // Safely convert Firestore timestamps to JS Date objects
          let startTime = null, endTime = null, createdAt = null;
          
          try {
            startTime = data.startTime?.toDate();
          } catch (e) {
            console.warn('Error converting startTime:', e);
          }
          
          try {
            endTime = data.endTime?.toDate();
          } catch (e) {
            console.warn('Error converting endTime:', e);
          }
          
          try {
            createdAt = data.createdAt?.toDate();
          } catch (e) {
            console.warn('Error converting createdAt:', e);
          }
          
          // Use fallback values if conversion failed
          startTime = startTime || new Date();
          endTime = endTime || new Date(startTime.getTime() + 7200000); // 2 hours after start
          createdAt = createdAt || new Date();
          
          return {
            id: doc.id,
            ...data,
            startTime,
            endTime,
            createdAt
          };
        });
        
        return events;
        
      } catch (error) {
        console.error('Error in getEvents:', error);
        
        // For not-found errors or other Firestore issues, fall back to mock events
        if (error.code === 'firestore/not-found' || error.code?.startsWith('firestore/')) {
          console.log('Firestore error, falling back to mock events');
          return EventService.getMockEvents();
        }
        
        throw error;
      }
    }, 3, 'getEvents');
  },

  // Rest of the EventService implementation...
  // [Previous implementation of other methods]
};

export default EventService;
